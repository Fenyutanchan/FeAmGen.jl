
################################################################
"""
    prepare_qgraf_dat( model::Model, input::Dict{Any,Any} )

Prepare the model file for `QGRAF`.
"""
function prepare_qgraf_dat( model::Model, input::Dict{Any,Any} )
################################################################

  inc_part_list = map( s_ -> model.particle_name_dict[s_], input["incoming"] )
  inc_idx_str_list = map( i_ -> string(i_), eachindex(inc_part_list) )
  inc_mom_str_list = map( (i_,p_) -> is_massless(p_) ? p_.name*"[k"*i_*"]" : p_.name*"[K"*i_*"]", 
                          inc_idx_str_list, inc_part_list )

  n_inc = length(inc_part_list)
  out_part_list = map( s_ -> model.particle_name_dict[s_], input["outgoing"] )
  out_idx_str_list = map( i_ -> string(i_+n_inc), eachindex(out_part_list) )
  out_mom_str_list = map( (i_,p_) -> is_massless(p_) ? p_.name*"[k"*i_*"]" : p_.name*"[K"*i_*"]", 
                          out_idx_str_list, out_part_list )

  file = open( "qgraf.dat", "w" )
  write( file, 
    "output='qgraf_out.dat';\n"*
    "style='miracle.sty';\n"*
    "model='model.qgraf';\n"*
    "in = "*join( inc_mom_str_list, "," )*";\n"*
    "out = "*join( out_mom_str_list, "," )*";\n"*
    "loops = "*string(input["n_loop"]+input["QCDCT_order"])*";\n"*
    "loop_momentum = q;\n" )
  if input["DropTadpole"] == true && input["DropWFcorrection"] == true 
    write( file, 
    "options = notadpole, onshell;\n" )
  elseif input["DropTadpole"] == true && input["DropWFcorrection"] == false 
    write( file, 
    "options = notadpole;\n" )
  elseif input["DropTadpole"] == false && input["DropWFcorrection"] == true 
    write( file, 
    "options = onshell;\n" )
  else 
    write( file, 
    "options =;\n" )
  end # if
  write( file, 
    "true = vsum[ gspow, "*string(input["Amp_QCD_order"])*", "*string(input["Amp_QCD_order"])*"];\n"*
    "true = vsum[ epow, "*string(input["Amp_QED_order"])*", "*string(input["Amp_QED_order"])*"];\n"*
    "true = vsum[ qcdctpow, "*string(input["QCDCT_order"])*", "*string(input["QCDCT_order"])*"];\n" )
  close(file)

  file = open( "miracle.sty", "w" )
  write( file, """
  <prologue>
  #
  # file generated by <program>
  #
  <command_loop><command_line_loop>#<command_data><end><end>#
  
  FeynmanDiagrams:
  <diagram>
  - # Diagram<diagram_index>
    diagram_index: <diagram_index>
    symmetry_factor: <symmetry_factor>
    sign: <sign>1
    incoming_propagators:<in_loop>
      - # incoming particle <in_index>
        in_index: <in_index>
        vertex_index: <vertex_index>
        field: "<field>"
        field_index: <field_index>
        momentum: "<momentum>"<end>
    outgoing_propagators:<out_loop>
      - # outgoing particle <out_index>
        out_index: <out_index>
        vertex_index: <vertex_index>
        field: "<field>"
        field_index: <field_index>
        momentum: "<momentum>"<end>
    remnant_propagators:<propagator_loop> 
      - # internal or loop propagator <propagator_index>
        propagator_index: <propagator_index>
        birth_index: <dual-vertex_index>
        death_index: <vertex_index>
        field: "<field>"
        momentum: "<momentum>"<end>
    vertices:<vertex_loop>
      - # vertex <vertex_index>
        vertex_index: <vertex_index>
        momentum_product: [[<ray_loop>"(<momentum>)",<end><back>]]
        fields: [[<ray_loop>"<field>",<end><back>]]
        propagator_index_list: [[<ray_loop><propagator_index>,<end><back>]]<end>
  <epilogue>
  
  
  <exit>

  """)
  close(file)


end # function prepare_qgraf_dat


#######################################################################
"""
    generate_Feynman_diagram( model::Model, input::Dict{Any,Any} )

Interface to generating Feynman diagrams by using `QGRAF`.
"""
function generate_Feynman_diagram( model::Model, input::Dict{Any,Any} )
#######################################################################

  printstyled( "[ Generate Feynman diagrams using QGRAF ]\n", color=:green )

  prepare_qgraf_dat( model, input )

  if isfile( "qgraf_out.dat" ) == true
    rm( "qgraf_out.dat" )
  end # if
  run( pipeline( `qgraf`, "qgraf.log" ) )
  @assert isfile( "qgraf_out.dat" )

  rm( "qgraf.dat" )
  rm( "model.qgraf" )
  rm( "miracle.sty" )

end # function generate_Feynman_diagram





###################################################################################################
"""
    get_interaction( field_name_list::Vector{String}, model::Model )::Tuple{Interaction,Int64}

Based on `model.particle_name_dict`, get the interaction according to the link field name list.
"""
###################################################################################################
function get_interaction( field_name_list::Vector{String}, model::Model )::Tuple{Interaction,Int64}
###################################################################################################

  QCDct_link_name_list = filter( s_ -> s_ in ["QCDct1","QCDct2"], field_name_list )
  QCDct_order = length( QCDct_link_name_list )

  normal_link_name_list = filter( s_ -> (s_ in ["QCDct1","QCDct2"]) == false, field_name_list ) 
  normal_link_kf_list = map( s_ -> model.particle_name_dict[s_].kf, normal_link_name_list )
  sorted_normal_link_kf_list = sort( normal_link_kf_list )
  inter = model.sorted_kf_list_dict[sorted_normal_link_kf_list]

  return inter, QCDct_order
end # function get_interaction
#################################################




###########################################################################################################
"""
    get_incoming_couplings_lorentz_list( part::Particle, mark::Int64, momentum::Basic )::Vector{Basic}

Produce the Basic expression for the incoming particles, which can be spinors or polarization vectors.
"""
function get_incoming_couplings_lorentz_list( part::Particle, mark::Int64, momentum::Basic )::Vector{Basic}
###########################################################################################################

  if part.spin == :fermion && part.kf > 0 
    return [ Basic(" SpU( $mark, spb$mark, $momentum, r$mark, $(part.mass) ) ") ]
  elseif part.spin == :fermion && part.kf < 0
    return [ Basic(" SpVB( $mark, spb$mark, $momentum, r$mark, $(part.mass) ) ") ]
  elseif part.spin == :vector
    return [ Basic(" VecEp( $mark, mub$mark, $momentum, r$mark, $(part.mass) ) ") ]
  elseif part.spin == :scalar
    return [ Basic("1") ]
  else
    @assert false "We should have not considered ghost in external field."
  end # if

end # function get_incoming_couplings_lorentz_list


###########################################################################################################
"""
    get_outgoing_couplings_lorentz_list( part::Particle, mark::Int64, momentum::Basic )::Vector{Basic}

Produce the Basic expression for the outgoing particles, which can be spinors or polarization vectors.
"""
function get_outgoing_couplings_lorentz_list( part::Particle, mark::Int64, momentum::Basic )::Vector{Basic}
###########################################################################################################

  if part.spin == :fermion && part.kf > 0
    return [ Basic(" SpUB( $mark, spa$mark, $momentum, r$mark, $(part.mass) ) ") ]
  elseif part.spin == :fermion && part.kf < 0
    return [ Basic(" SpV( $mark, spa$mark, $momentum, r$mark, $(part.mass) ) ") ]
  elseif part.spin == :vector
    return [ Basic(" VecEpC( $mark, mua$mark, $momentum, r$mark, $(part.mass) ) ") ]
  elseif part.spin == :scalar
    return [ Basic("1") ]
  else
    error( "We should have not considered ghost in external field.\n" )
  end # if

end # function get_outgoing_couplings_lorentz_list


##########################################################################################################
"""
    get_remnant_couplings_lorentz_list( part::Particle, mark::Int64, momentum::Basic, use_unitary_gauge::Bool )::Vector{Basic}

Produce the Basic expression for the internal/loop propagator particles.
"""
function get_remnant_couplings_lorentz_list( part::Particle, mark::Int64, momentum::Basic, use_unitary_gauge::Bool )::Vector{Basic}
##########################################################################################################

  if part.spin == :fermion
    #return [ Basic(" I*( GAij(spb$mark,spa$mark,$momentum)+ONEij(spb$mark,spa$mark)*$(part.mass) )*Den($momentum,$(part.mass),$(part.width)) ") ]
    return [ Basic(" I*GAij(spb$mark,spa$mark,$momentum,$(part.mass))*Den($momentum,$(part.mass),$(part.width)) ") ]
  elseif part.spin == :vector && is_massless(part) == true 
    return [ Basic(" (-1)*I*LMT(mua$mark,mub$mark)*Den($momentum,0,0) ") ]
  elseif part.spin == :vector && is_massless(part) == false 
    if use_unitary_gauge == true 
      return [ Basic(" (-1)*I*Den($momentum,$(part.mass),$(part.width))*( LMT(mua$mark,mub$mark)-FV($momentum,mua$mark)*FV($momentum,mub$mark)*$(part.mass)^(-2) ) ") ]
    else
      return [ Basic(" (-1)*I*LMT(mua$mark,mub$mark)*Den($momentum,$(part.mass),$(part.width)) ") ]
    end # if
  elseif part.spin in [:scalar, :ghost]
    return [ Basic(" I*Den( $momentum, $(part.mass), $(part.width) ) ") ]
  else 
    error( "We should have not considered ghost in external field.\n" )
  end # if

end # function get_remnant_couplings_lorentz_list



###########################################################################################
"""
    edge_from_link_index( 
        vert_id::Int64, 
        link_index::Int64, 
        g::Graph 
    )::Edge

Get the Edge according to the link_index in the vertex index `vert_id` in the Graph `g`.
"""
function edge_from_link_index( 
    g::Graph, 
    vert_id::Int64, 
    link_index::Int64  
)::Edge
###########################################################################################

  propagator_index = get_node_index_prop( g, vert_id, :propagator_index_list )[link_index]
  the_edge_pos = findfirst( e_ -> e_.property[:propagator_index] == propagator_index, g.edge_list )
  @assert the_edge_pos != nothing

  return g.edge_list[the_edge_pos]

end # function edge_from_link_index




#################################################################################
"""
    get_link_color( 
        g::Graph, 
        vert_id::Int64, 
        link_index::Int64, 
        part_list::Vector{Particle} 
    )::Basic

Generate the Basic expression symbol for the color index for the `link_index` 
  in vertex index `vert_id` in Graph `g`.
"""
function get_link_color( 
    g::Graph, 
    vert_id::Int64, 
    link_index::Int64, 
    part_list::Vector{Particle} 
)::Basic
################################################################################

  in_edge_list = get_in_edge_list( g, vert_id )
  out_edge_list = get_out_edge_list( g, vert_id )
  vert = g.node_list[vert_id]
  vert_mark = vert.property[:mark] 

  if link_index < 0
    link_color = Basic("clv$(vert_mark*100+abs(link_index))")
  else 
    link_edge = edge_from_link_index( g, vert_id, link_index )
    death_color = link_edge.property[:death_COLOR]
    birth_color = link_edge.property[:birth_COLOR]

    part = part_list[link_index]
    # This is for W+/W- like, although in SM there is only gluon will have this kind of color factor.
    link_color = link_edge in in_edge_list ? death_color : birth_color
    # Then what if gluon or Z-like
    if link_edge in in_edge_list && link_edge in out_edge_list 
      link_color = part.kf > 0 ? death_color : birth_color
      if is_neutral(part)
        propagator_index = vert.property[:propagator_index_list][link_index]
        first_pos = findfirst( x_ -> x_ == propagator_index,  vert.property[:propagator_index_list] )
        link_color = first_pos == link_index ? death_color : birth_color
      end # if
    end # if
  end # if 

  return link_color

end # function get_link_color


#########################################################################################
"""
    translate_color_factor( 
        one_color::Basic, 
        vert_id::Int64, 
        g::Graph, 
        part_list::Vector{Particle} 
)::Basic

Combine the generic color `one_color` expression with the specific node index `vert_id`, 
  and produce the color factor for this vertex in this diagram.
"""
function translate_color_factor( 
    one_color::Basic, 
    vert_id::Int64, 
    g::Graph, 
    part_list::Vector{Particle} 
)::Basic
#########################################################################################

  @funs Identity DeltaFun DeltaAdj T SUNT f SUNF

  color_str = string(one_color)
  new_color = one_color

  range_list = findall( r"Identity\([+-]*\d+, [+-]*\d+\)", color_str )
  Identity_str_list = map( r_ -> color_str[r_], range_list ) 

  for one_Identity_str in Identity_str_list 
    args = get_args( Basic(one_Identity_str) )
    link1_index, link2_index = convert(Int64,args[1]), convert(Int64,args[2])

    # It is not possible that both of link1_index and link2_index are negative (dummy).
    @assert link1_index > 0 || link2_index > 0 
    if link1_index > 0 
      edge1or2 = edge_from_link_index( g, vert_id, link1_index )
    elseif link2_index > 0
      edge1or2 = edge_from_link_index( g, vert_id, link2_index )
    else 
      @assert false
    end # if

    # This first case is considering the tadpole sunset diagram.
    if link1_index == link2_index
      color1, color2 = edge1or2.property["birth_COLOR"], edge1or2.property["death_COLOR"]
    # Then in the other case, we need to consider the case with dummy index.
    else
      color1 = get_link_color( g, vert_id, link1_index, part_list )
      color2 = get_link_color( g, vert_id, link2_index, part_list )
    end # if
    
    edge1or2_color = edge1or2.property[:particle].color
    @assert edge1or2_color != :singlet
    new_color = subs( new_color, Basic(one_Identity_str), 
                      edge1or2_color == :triplet ? DeltaFun(color1,color2) : DeltaAdj(color1,color2) )
  end # for one_Identity_str

  range_list = findall( r"[Tf]+\([+-]*\d+, [+-]*\d+, [+-]*\d+\)", color_str )
  Tf_str_list = map( r_ -> color_str[r_], range_list ) 

  for one_Tf_str in Tf_str_list 
    args = get_args( Basic(one_Tf_str) )
    link1_index, link2_index, link3_index = convert(Int64,args[1]), convert(Int64,args[2]), convert(Int64,args[3])

    # It is not possible that all of link1_index and link2_index and link3_index are negative (dummy).
    @assert link1_index > 0 || link2_index > 0 || link3_index > 0

    # two of [link1_index,link2_index,link3_index] are same 
    if link1_index == link2_index
      edge12 = edge_from_link_index( g, vert_id, link1_index )
      color1, color2 = edge12.property[:birth_COLOR], edge12.property[:death_COLOR]
      color3 = get_link_color( g, vert_id, link3_index, part_list )
    elseif link1_index == link3_index
      edge13 = edge_from_link_index( g, vert_id, link1_index )
      color1, color3 = edge13.property[:birth_COLOR], edge13.property[:death_COLOR]
      color2 = get_link_color( g, vert_id, link2_index, part_list )
    elseif link2_index == link3_index
      edge23 = edge_from_link_index( g, vert_id, link2_index )
      color2, color3 = edge23.property[:birth_COLOR], edge23.property[:death_COLOR]
      color1 = get_link_color( g, vert_id, link1_index, part_list )
    # Then none of them are same.
    else
      color1 = get_link_color( g, vert_id, link1_index, part_list )
      color2 = get_link_color( g, vert_id, link2_index, part_list )
      color3 = get_link_color( g, vert_id, link3_index, part_list )
    end # if
    
    new_color = subs( new_color, Basic(one_Tf_str), 
                                 Basic("SUN$(uppercase(one_Tf_str[1]))($color1,$color2,$color3)") )
  end # for one_T_str

  return new_color
end # function translate_color_factor



#####################################################################
"""
    get_link_lorentz( 
        g::Graph, 
        vert_id::Int64, 
        link_index::Int64, 
        part_list::Vector{Particle} 
    )::Basic

Generate the Basic expression symbol for the Lorentz index 
  for the `link_index` in node_index `vert_id` in Graph `g`.
"""
function get_link_lorentz( 
    g::Graph, 
    vert_id::Int64, 
    link_index::Int64, 
    part_list::Vector{Particle} 
)::Basic
####################################################################

  in_edge_list = get_in_edge_list( g, vert_id )
  out_edge_list = get_out_edge_list( g, vert_id )
  vert = g.node_list[vert_id]
  vert_mark = vert.property[:mark]

  if link_index < 0
    link_lor = Basic("muv$(vert_mark*100+abs(link_index))")
  else 
    link_edge = edge_from_link_index( g, vert_id, link_index )
    death_lor = link_edge.property[:death_LORENTZ]
    birth_lor = link_edge.property[:birth_LORENTZ]

    part = part_list[link_index]
    # This is for W+/W-
    link_lor = link_edge in in_edge_list ? death_lor : birth_lor
    # Then what if gluon or Z
    if link_edge in in_edge_list && link_edge in out_edge_list
      link_lor = part.kf > 0 ? death_lor : birth_lor
      if is_neutral(part)
        propagator_index = vert.property[:propagator_index_list][link_index]
        first_pos = findfirst( x_ -> x_ == propagator_index,  vert.property[:propagator_index_list] )
        link_lor = first_pos == link_index ? death_lor : birth_lor
      end # if
    end # if
  end # if 

  return link_lor

end # function get_link_lorentz


#######################################################################################
"""
    get_link_momentum( g::Graph, vert_id::Int64, link_index::Int64 )::Basic

Generate the Basic expression symbol for the momentum 
  for the `link_index` in node index `vert_id` in Graph `g`.
"""
function get_link_momentum( g::Graph, vert_id::Int64, link_index::Int64 )::Basic
#######################################################################################

  in_edge_list = get_in_edge_list( g, vert_id )

  @assert link_index > 0
  link_edge = edge_from_link_index( g, vert_id, link_index )
  # momentum is flow out in UFO Feynman rules
  link_momentum = ( link_edge in in_edge_list ? (-1) : 1 ) * link_edge.property[:momentum]

  return link_momentum

end # function get_link_momentum



#####################################################################################
"""
    get_link_spinor( g::Graph, vert_id::Int64, link_index::Int64 )::Basic

Generate the Basic expression symbol for the external spinors for the `link_index` 
  in node index `vert_id` in Graph `g`.
"""
function get_link_spinor( g::Graph, vert_id::Int64, link_index::Int64 )::Basic
#####################################################################################

  in_edge_list = get_in_edge_list( g, vert_id )
  vert = g.node_list[vert_id]
  vert_mark = vert.property[:mark]

  if link_index < 0
    link_spinor = Basic("spv$(vert_mark*100+abs(link_index))")
  else 
    link_edge = edge_from_link_index( g, vert_id, link_index )
    link_spinor = link_edge in in_edge_list ? link_edge.property[:death_SPINOR] : link_edge.property[:birth_SPINOR]
  end # if 

  return link_spinor

end # function get_link_spinor





############################################################################
"""
    translate_lorentz_factor( 
        one_lorentz::Basic, 
        vert_id::Int64, 
        g::Graph, 
        part_list::Vector{Particle} 
    )::Basic

Combine the generic Lorentz factor `one_lorentz` expression 
  with the specific node index `vert_id`, and produce the Lorentz factor 
  for this vertex in this diagram.
"""
function translate_lorentz_factor( 
    one_lorentz::Basic, 
    vert_id::Int64, 
    g::Graph, 
    part_list::Vector{Particle} 
)::Basic
##############################################################################

  @funs Metric LMT P FV Gamma GAij ProjP PRij ProjM PLij Identity ONEij 

  if one_lorentz == P(1, 2)*Metric(2, 3) - P(1, 3)*Metric(2, 3) - P(2, 1)*Metric(1, 3) + P(2, 3)*Metric(1, 3) + P(3, 1)*Metric(1, 2) - P(3, 2)*Metric(1, 2)
    edge1 = edge_from_link_index( g, vert_id, 1 )
    edge2 = edge_from_link_index( g, vert_id, 2 )
    edge3 = edge_from_link_index( g, vert_id, 3 )
    lor1 = get_link_lorentz( g, vert_id, 1, part_list )
    lor2 = get_link_lorentz( g, vert_id, 2, part_list )
    lor3 = get_link_lorentz( g, vert_id, 3, part_list )
    mom1 = get_link_momentum( g, vert_id, 1 )
    mom2 = get_link_momentum( g, vert_id, 2 )
    mom3 = get_link_momentum( g, vert_id, 3 )
    new_lorentz = FV(mom2-mom3,lor1)*LMT(lor2,lor3) + FV(mom3-mom1,lor2)*LMT(lor3,lor1) + FV(mom1-mom2,lor3)*LMT(lor1,lor2)
    return new_lorentz
  end # if

  lorentz_str = string(one_lorentz)
  new_lorentz = one_lorentz

  range_list = findall( r"Metric\([+-]*\d+, [+-]*\d+\)", lorentz_str )
  Metric_str_list = map( r_ -> lorentz_str[r_], range_list ) 
  for one_Metric_str in Metric_str_list
    args = get_args( Basic(one_Metric_str) )
    link1_index, link2_index = convert(Int64,args[1]), convert(Int64,args[2])
    @assert link1_index > 0 && link2_index > 0
    if link1_index > 0 
      edge1or2 = edge_from_link_index( g, vert_id, link1_index )
    elseif link2_index > 0
      edge1or2 = edge_from_link_index( g, vert_id, link2_index )
    else 
      @assert false
    end # if

    if link1_index == link2_index
      lor1, lor2 = edge1or2.property[:birth_LORENTZ], edge1or2.property[:death_LORENTZ]
    else
      lor1 = get_link_lorentz( g, vert_id, link1_index, part_list )
      lor2 = get_link_lorentz( g, vert_id, link2_index, part_list )
    end # if

    new_lorentz = subs( new_lorentz, Basic(one_Metric_str), LMT(lor1,lor2) )
  end # for one_Metric_str

  range_list = findall( r"P\([+-]*\d+, [+-]*\d+\)", lorentz_str )
  P_str_list = map( r_ -> lorentz_str[r_], range_list ) 
  for one_P_str in P_str_list
    args = get_args( Basic(one_P_str) )
    link1_index, link2_index = convert(Int64,args[1]), convert(Int64,args[2])

    lor1 = get_link_lorentz( g, vert_id, link1_index, part_list )
    mom2 = get_link_momentum( g, vert_id, link2_index )
    new_lorentz = subs( new_lorentz, Basic(one_P_str), FV(mom2,lor1) )
  end # for one_P_str

  range_list = findall( r"Gamma\([+-]*\d+, [+-]*\d+, [+-]*\d+\)", lorentz_str )
  Gamma_str_list = map( r_ -> lorentz_str[r_], range_list ) 
  for one_Gamma_str in Gamma_str_list
    args = get_args( Basic(one_Gamma_str) )
    link1_index, link2_index, link3_index = convert(Int64,args[1]), convert(Int64,args[2]), convert(Int64,args[3])

    lor1 = get_link_lorentz( g, vert_id, link1_index, part_list )
    sp2 = get_link_spinor( g, vert_id, link2_index )
    sp3 = get_link_spinor( g, vert_id, link3_index )

    new_lorentz = subs( new_lorentz, Basic(one_Gamma_str), GAij(sp2,sp3,lor1) )
  end # for one_Gamma_str

  range_list = findall( r"ProjP\([+-]*\d+, [+-]*\d+\)", lorentz_str )
  ProjP_str_list = map( r_ -> lorentz_str[r_], range_list ) 
  for one_ProjP_str in ProjP_str_list
    args = get_args( Basic(one_ProjP_str) )
    link1_index, link2_index = convert(Int64,args[1]), convert(Int64,args[2])

    sp1 = get_link_spinor( g, vert_id, link1_index )
    sp2 = get_link_spinor( g, vert_id, link2_index )

    new_lorentz = subs( new_lorentz, Basic(one_ProjP_str), PRij(sp1,sp2) )
  end # for one_ProjP_str

  range_list = findall( r"ProjM\([+-]*\d+, [+-]*\d+\)", lorentz_str )
  ProjM_str_list = map( r_ -> lorentz_str[r_], range_list ) 
  for one_ProjM_str in ProjM_str_list
    args = get_args( Basic(one_ProjM_str) )
    link1_index, link2_index = convert(Int64,args[1]), convert(Int64,args[2])

    sp1 = get_link_spinor( g, vert_id, link1_index )
    sp2 = get_link_spinor( g, vert_id, link2_index )

    new_lorentz = subs( new_lorentz, Basic(one_ProjM_str), PLij(sp1,sp2) )
  end # for one_ProjM_str

  range_list = findall( r"Identity\([+-]*\d+, [+-]*\d+\)", lorentz_str )
  Identity_str_list = map( r_ -> lorentz_str[r_], range_list ) 
  for one_Identity_str in Identity_str_list
    args = get_args( Basic(one_Identity_str) )
    link1_index, link2_index = convert(Int64,args[1]), convert(Int64,args[2])

    sp1 = get_link_spinor( g, vert_id, link1_index )
    sp2 = get_link_spinor( g, vert_id, link2_index )

    new_lorentz = subs( new_lorentz, Basic(one_Identity_str), ONEij(sp1,sp2) )
  end # for one_Identity_str

  return new_lorentz

end # function translate_lorentz_factor









###########################################################################
"""
    convert_qgraf_TO_Graph( 
        one_qgraf::Dict{Any,Any}, 
        model::Model 
    )::Union{Graph,Nothing}

Convert the diagram read from QGRAF into the Graph in Julia.
"""
function convert_qgraf_TO_Graph( 
    one_qgraf::Dict{Any,Any}, 
    model::Model 
)::Union{Graph,Nothing}
###########################################################################

  # Check if there is CT vertex and if the QCDct field is properly used for CT graphs.
  # QCDct1 and QCDct2 should have same end-points as designed.
  # It is possible that the diagram does not have any remnant propagator.
  QCDct_propagators = Dict{Any,Any}[]
  if !isnothing( one_qgraf["remnant_propagators"] )
    QCDct_propagators::Array{Dict{Any,Any},1} = filter( p_ -> p_["field"] in ["QCDct1","QCDct2"], one_qgraf["remnant_propagators"] )
    invalid_propagator_pos = findfirst( p_ -> p_["birth_index"] != p_["death_index"], QCDct_propagators )
    if !isnothing( invalid_propagator_pos ) 
      @info "Found one invalid diagram!"
      return nothing
    end # if
  end # if

  n_QCDct = length( QCDct_propagators )

  qgraf_incoming_propagators = one_qgraf["incoming_propagators"]
  n_inc = length(qgraf_incoming_propagators)
  qgraf_outgoing_propagators = one_qgraf["outgoing_propagators"]
  n_out = length(qgraf_outgoing_propagators)

  g = graph()  
  set_prop!( g, Dict{Symbol,Any}( 
    ## Diagram index
    :diagram_index => one_qgraf["diagram_index"], 
    ## Read-in symmetry_factor.
    :symmetry_factor => one_qgraf["symmetry_factor"], 
    ## Read-in sign of this diagram. 
    ## The sign from QGRAF is combination of anti-commutivative field (fermion,ghost,QCDct1,QCDct2...) loops,
    ##   and the way open fermionic/ghost lines connect those external fields.
    ## Also correct the sign if there is QCDct1 or QCDct2, 
    ##   since they are defined as anti-commutative fields to avoid changing symmetry factor.
    :sign => one_qgraf["sign"]*(-1)^n_QCDct, 
###### For sake of function vertex_from_mark, we also need "mark" for v0
####:mark => 0,
###### For filtering the "style"
####:style => "", 
    ## For distinguishing incoming and outgoing edges
    :n_inc => n_inc, 
    :n_out => n_out 
  ) )



  ## Add incoming vertices.
  for one_inc in qgraf_incoming_propagators
    vert_idx = n_node(g)+1 # vert_idx starts from 1
    mark = one_inc["in_index"] 
    add_node!( g, mark, Dict{Symbol,Any}(
      :name => "v$vert_idx", 
      :mark => mark,
      :style => "External",
      :interaction => nothing,
      :QCDct_order => 0,
      :color_list => [1],
      :couplings_lorentz_list => [1]
    ) )
  end # for one_inc


  # Add outgoing vertices.
  for one_out in qgraf_outgoing_propagators
    vert_idx = n_node(g)+1 # vert_idx starts from 1
    mark = one_out["out_index"]+n_inc 
    add_node!( g, mark, Dict{Symbol,Any}(
      :name => "v$vert_idx",
      :mark => mark,
      :style => "External",
      :interaction => nothing,
      :QCDct_order => 0,
      :color_list => [1],
      :couplings_lorentz_list => [1] 
    ) ) 
  end # for one_out


  #  Add internal or loop vertices.
  qgraf_vertices = one_qgraf["vertices"]
  for one_vert in qgraf_vertices
    # Get interaction and QCDct_order
    inter, QCDct_order = get_interaction( one_vert["fields"], model )
    
    #-----------------------------------------------------------------------------------------------
    # Now we need to re-order the list "propagator_index_list" associated with one_vert["fields"] (source)
    #     according to the vertex Feynman rule "inter.link_list" (destination).
    #-----------------------------------------------------------------------------------------------
    src_part_name_list = one_vert["fields"] # source list of particle names
    p_src = sortperm( src_part_name_list )
    dst_part_name_list = map( p_ -> p_.name, inter.link_list ) # destination list of particle names
    p_dst = sortperm( dst_part_name_list )
    invp_dst = invperm( p_dst )
    @assert src_part_name_list[p_src][invp_dst] == dst_part_name_list
    feynrules_index_list = one_vert["propagator_index_list"][p_src][invp_dst] 

    # color_list and couplings_lorentz_list will be generated later.
    vert_idx = n_node(g)+1 # vert_idx starts from 1
    mark = one_vert["vertex_index"]+n_inc+n_out 
    add_node!( g, mark, Dict{Symbol,Any}(
      :name => "v$vert_idx", 
      :mark => mark,
      :style => "Internal",
      :interaction => inter,
      :QCDct_order => QCDct_order,
      :propagator_index_list => feynrules_index_list,
      :color_list => nothing,
      :couplings_lorentz_list => nothing 
    ) )
  end # for one_vert


  # Add incoming propagators.
  # It could be u(kf>0) or vbar(kf<0) for fermion, epsilon_\mu for vector, 1 for scalar.
  for one_inc in qgraf_incoming_propagators
    in_v_mark = one_inc["in_index"]
    vert_v_mark = one_inc["vertex_index"]+n_inc+n_out
    field_name = one_inc["field"]
    field_part = model.particle_name_dict[field_name]

    mark = in_v_mark
    momentum = Basic(one_inc["momentum"])
    couplings_lorentz_list = get_incoming_couplings_lorentz_list( field_part, mark, momentum )

    add_edge!( g, mark, in_v_mark, vert_v_mark, Dict{Symbol,Any}( 
        :mark => mark,
        :particle => field_part,
        :style => "External",
        :propagator_index => one_inc["field_index"],
        :momentum => momentum,
        :ref2_MOM => Basic("r$mark"),
        :null_MOM => Basic("k$mark"),
        :birth_LORENTZ => Basic("mua$mark"), 
        :birth_COLOR => Basic("cla$mark"), 
        :birth_SPINOR => Basic("spa$mark"),
        :death_LORENTZ => Basic("mub$mark"), 
        :death_COLOR => Basic("clb$mark"), 
        :death_SPINOR => Basic("spb$mark"),
        :color_list => [ Basic("1") ],
        :couplings_lorentz_list => couplings_lorentz_list 
    ) ) 
  end # for one_inc


  # Add outgoing propagaotrs.
  # It could be ubar(kf>0) or v(kf<0) for fermion, epsilon_\mu^* for vector, 1 for scalar.
  for one_out in qgraf_outgoing_propagators
    out_v_mark = one_out["out_index"]+n_inc
    vert_v_mark = one_out["vertex_index"]+n_inc+n_out
    field_name = one_out["field"]
    field_part = model.particle_name_dict[field_name]

    mark = out_v_mark
    momentum = Basic(one_out["momentum"])
    couplings_lorentz_list = get_outgoing_couplings_lorentz_list( field_part, mark, momentum )

    add_edge!( g, mark, vert_v_mark, out_v_mark, Dict{Symbol,Any}( 
        :mark => mark,
        :particle => field_part,
        :style => "External",
        :propagator_index => one_out["field_index"],
        :momentum => momentum,
        :ref2_MOM => Basic("r$mark"),
        :null_MOM => Basic("k$mark"),
        :birth_LORENTZ => Basic("mua$mark"), 
        :birth_COLOR => Basic("cla$mark"), 
        :birth_SPINOR => Basic("spa$mark"),
        :death_LORENTZ => Basic("mub$mark"), 
        :death_COLOR => Basic("clb$mark"), 
        :death_SPINOR => Basic("spb$mark"),
        :color_list => [ Basic("1") ],
        :couplings_lorentz_list => couplings_lorentz_list 
    ) ) 
  end # for one_out


  # Filter out the "QCDct1" and "QCDct2" propagators.
  # It is possible that the diagram does not have any remnant propagator.
  true_remnant_propagators = Dict{Any,Any}[]
  if !isnothing( one_qgraf["remnant_propagators"] )
    qgraf_remnant_propagators = one_qgraf["remnant_propagators"]
    true_remnant_propagators::Array{Dict{Any,Any},1} = filter( rem_ -> (rem_["field"] in ["QCDct1","QCDct2"]) == false, qgraf_remnant_propagators )
  end # if
  # Add internal and loop propagators.
  for one_rem in true_remnant_propagators
    mark = one_rem["propagator_index"]+n_inc+n_out
    birth_v_mark = one_rem["birth_index"]+n_inc+n_out
    death_v_mark = one_rem["death_index"]+n_inc+n_out
    field_name = one_rem["field"]
    field_part = model.particle_name_dict[field_name]

    momentum = sign(field_part.kf)*Basic(one_rem["momentum"])

    style_str = findfirst("q",one_rem["momentum"]) == nothing ? "Internal" : "Loop"

    id_color_dict = Dict( :triplet => [ Basic(" DeltaFun(clb$mark,cla$mark) ") ], 
                          :octet   => [ Basic(" DeltaAdj(clb$mark,cla$mark) ") ],
                          :singlet => [ Basic("1") ] )

    couplings_lorentz_list = get_remnant_couplings_lorentz_list( field_part, mark, momentum, model.unitary_gauge )

    new_edge_pair = field_part.kf > 0 ? ( birth_v_mark, death_v_mark ) : ( death_v_mark, birth_v_mark )

    add_edge!( g, mark, new_edge_pair, Dict{Symbol,Any}( 
      :mark => mark,
      :particle => model.particle_kf_dict[abs(field_part.kf)],
      :style => style_str,
      :propagator_index => one_rem["propagator_index"], 
      :momentum => momentum,
      :ref2_MOM => Basic("0"),
      :null_MOM => Basic("0"),
      :birth_LORENTZ => Basic("mua$mark"), 
      :birth_COLOR => Basic("cla$mark"), 
      :birth_SPINOR => Basic("spa$mark"),
      :death_LORENTZ => Basic("mub$mark"), 
      :death_COLOR => Basic("clb$mark"), 
      :death_SPINOR => Basic("spb$mark"),
      :color_list => id_color_dict[field_part.color],
      :couplings_lorentz_list => couplings_lorentz_list 
    ) ) 
  end # for one_rem



  #-------------------------------------------------------------------
  # Now the structure of this Feynman diagram has been digested into Graph.
  # Then we can evaluate color_row_list and couplings_lorentz_col_list for the internal or loop vertices.
  #-------------------------------------------------------------------
  internal_vertex_index_list = filter( v_id -> get_node_index_prop(g,v_id,:style) == "Internal", 1:n_node(g) )
  for vert_id in internal_vertex_index_list
    vert = g.node_list[vert_id]
    inter = vert.property[:interaction]

    new_color_row_list = map( color_ -> translate_color_factor(color_,vert_id,g,inter.link_list), 
                              inter.color_row_list )

    new_lorentz_col_list = map( lor_ -> translate_lorentz_factor(lor_,vert_id,g,inter.link_list), 
                                inter.lorentz_col_list )

    n_row, n_col = size( inter.couplings_matrix )
    new_couplings_lorentz_list = Array{Basic,1}(undef,n_row)
    @vars CTorder
    for r_ in 1:n_row
      new_couplings_lorentz_list[r_] = 0
      for c_ in 1:n_col
        if vert.property[:QCDct_order] == 0 
          new_couplings_lorentz_list[r_] += subs(inter.couplings_matrix[r_,c_],CTorder,0)*new_lorentz_col_list[c_]
        else 
          new_couplings_lorentz_list[r_] += coeff( expand(inter.couplings_matrix[r_,c_]), CTorder^(vert.property[:QCDct_order]) )*new_lorentz_col_list[c_]
        end # if
      end # for c_
    end # for r_

    vert.property[:color_list] = new_color_row_list
    vert.property[:couplings_lorentz_list] = new_couplings_lorentz_list
  end # for vert 

  return g

end # function convert_qgraf_TO_Graph



###########################################
"""
    tensor_product( 
        ex_list1::Union{Vector{Basic},Vector{Int64}}, 
        ex_list2::Union{Vector{Basic},Vector{Int64}}
    )::Vector{Basic}

tensor_product( x, y ): 
x and y are two string lists/arrays.
This function calculate the tensor production of two arrays.
"""
function tensor_product( 
    ex_list1::Union{Vector{Basic},Vector{Int64}}, 
    ex_list2::Union{Vector{Basic},Vector{Int64}}
)::Vector{Basic}
###########################################

  res = Vector{Basic}()
  for ex1 in ex_list1, ex2 in ex_list2
    push!(res,ex1*ex2)
  end
  return res

end # function tensor_product




###################################################################
"""
    assemble_amplitude( g::Graph )::Tuple{Vector{Basic},Vector{Basic}}

Now this graph can be evaluated according to the values of the propagators and vertices.
"""
function assemble_amplitude( g::Graph )::Tuple{Vector{Basic},Vector{Basic}}
###################################################################

  amp_color_list = Basic[1]
  amp_couplings_lorentz_list = Basic[1]
  for vert in g.node_list
    amp_color_list = tensor_product( amp_color_list, vert.property[:color_list] )
    amp_couplings_lorentz_list = tensor_product( amp_couplings_lorentz_list, vert.property[:couplings_lorentz_list] )
  end # for vert

  for edge in g.edge_list
    amp_color_list = tensor_product( amp_color_list, edge.property[:color_list] )
    amp_couplings_lorentz_list = tensor_product( amp_couplings_lorentz_list, edge.property[:couplings_lorentz_list] )
  end # for edge

  return amp_color_list, amp_couplings_lorentz_list;

end # function assemble_amplitude




###############################################################
"""
    generate_scale2_list( g::Graph, kin_relation::Dict{Basic,Basic} )::Vector{Basic}

Collect all the symbols that are the squares of scales.
"""
function generate_scale2_list( g::Graph, kin_relation::Dict{Basic,Basic} )::Vector{Basic}
###############################################################

  ver_mass_list = Vector{Basic}()
  #-----------------------
  for one_pair in kin_relation
    if get_name( one_pair[1] ) == "Den"
      continue
    end # if
    ver_mass_list = vcat( ver_mass_list, free_symbols( one_pair[2] ) )
  end # for one_pair

  #-----------------------
  for one_edge in g.edge_list
    mass = one_edge.property[:particle].mass
    if mass == 0
      continue
    end # if
    ver_mass_list = vcat( ver_mass_list, mass )
  end # for one_edge

  #-----------------------
  unique!( ver_mass_list )


  #-----------------------
  scale2_list = Vector{Basic}( undef, length(ver_mass_list) )
  for index in 1:length(ver_mass_list)
    ver_mass_str = string(ver_mass_list[index])
    if ver_mass_str[1] == 'm'
      scale2_list[index] = ver_mass_list[index]^2
    else 
      scale2_list[index] = ver_mass_list[index]
    end # if
  end # for index

  return scale2_list

end # function generate_scale2_list













#######################################################################
"""
    factor_out_loop_den( 
        g::Graph, 
        lorentz_list::Vector{Basic} 
    )::Tuple{Vector{Basic},Vector{Basic},Vector{Int64}}

Factorize out the loop propagator denominators, 
  so that the `lorentz_list` can become shorter. 
  And then they can be handled separately.
"""
function factor_out_loop_den( 
    g::Graph, 
    lorentz_list::Vector{Basic} 
)::Tuple{Vector{Basic},Vector{Basic},Vector{Int64}}
#########################################################################

  @funs Den

  loop_edge_list = filter( e_ -> e_.property[:style] == "Loop", g.edge_list )

  den_prod = Basic(1)
  width_den_prod = Basic(1)
  for one_edge in loop_edge_list
    mom = one_edge.property[:momentum]
    mass = one_edge.property[:particle].mass
    width = one_edge.property[:particle].width
    # For now we only consider the width of loop propagator is zero.
    den_prod *= Den( mom, mass, 0 ) 
    width_den_prod *= Den( mom, mass, width ) 
  end # for one_edge

  new_lorentz_list = map( x_ -> expand(x_/width_den_prod), lorentz_list )

  @assert SymEngine.get_symengine_class(den_prod) == :Mul || den_prod == 1 || get_name(den_prod) == "Den"
  factor_list = get_args(den_prod)
  if SymEngine.get_symengine_class(den_prod) == :FunctionSymbol && get_name(den_prod) == "Den" 
    factor_list = Basic[ den_prod ]
  end # if
  n_factor = length(factor_list)
  loop_den_list = Vector{Basic}( undef, n_factor )
  loop_den_xpt_list = Vector{Int64}( undef, n_factor )
  for index in 1:n_factor
    one_factor = factor_list[index]
    if SymEngine.get_symengine_class(one_factor) == :FunctionSymbol && get_name(one_factor) == "Den"
      loop_den_list[index] = one_factor
      loop_den_xpt_list[index] = 1
    elseif SymEngine.get_symengine_class(one_factor) == :Pow && get_name(get_args(one_factor)[1]) == "Den"
      loop_den_list[index] = get_args(one_factor)[1]
      loop_den_xpt_list[index] = convert( Int64, get_args(one_factor)[2] )
    else
      error( "Not expected: "*string(one_factor) )
    end # if
  end # for index

  return new_lorentz_list, loop_den_list, loop_den_xpt_list

end # function factor_out_loop_den





##################################################################################
"""
    contract_Dirac_indices( 
        g::Graph, 
        lorentz_expr_list::Vector{Basic} 
    )::Vector{Basic}

Contract the Dirac indices in the `lorentz_expr_list` by using FORM scripts.
"""
function contract_Dirac_indices( 
    g::Graph, 
    lorentz_expr_list::Vector{Basic} 
)::Vector{Basic}
##################################################################################

  diagram_index = g.property[:diagram_index]
  printstyled( "[ Contract the Dirac indices for diagram #$(diagram_index) ]\n", color=:green )

  new_lorentz_expr_list = Vector{Basic}( undef, length(lorentz_expr_list) )
  for index in 1:length(lorentz_expr_list)
    lorentz_expr = lorentz_expr_list[index]
    file_name = "contract_lorentz_expr$(index)_diagram$(diagram_index)"
    form_script_str = make_amp_contraction_script( lorentz_expr, file_name )

    file = open( "$(file_name).frm", "w" )
    write( file, form_script_str )
    close(file)

    println( "  [ form $(file_name).frm ]" )
    run( pipeline( `form $(file_name).frm`, "$(file_name).log" ) )

    file = open( "$(file_name).out", "r" )
    result_str = read( file, String )
    close( file )
    result_expr = Basic(result_str)
    new_lorentz_expr_list[index] = result_expr

    rm( "$(file_name).frm" )
    rm( "$(file_name).out" )
    rm( "$(file_name).log" )

  end # for index

  return new_lorentz_expr_list

end # function contract_Dirac_indices







##################################################################################
"""
    contract_Dirac_indices_noexpand( 
        g::Graph, 
        lorentz_expr_list::Vector{Basic} 
    )::Vector{Basic}

Contract the Dirac indices in the `lorentz_expr_list` by using FORM scripts, but do not expand the amplitudes.
"""
function contract_Dirac_indices_noexpand( 
    g::Graph, 
    lorentz_expr_list::Vector{Basic} 
)::Vector{Basic}
##################################################################################

  diagram_index = g.property[:diagram_index]
  printstyled( "\n[ Contract the Dirac indices (no expansion) for diagram #$(diagram_index) ]\n", color=:green )

  new_lorentz_expr_list = Vector{Basic}( undef, length(lorentz_expr_list) )
  for index in 1:length(lorentz_expr_list)
    lorentz_expr = lorentz_expr_list[index]
    file_name = "contract_lorentz_expr$(index)_diagram$(diagram_index)_noexpand"
    form_script_str = make_amp_contraction_noexpand_script( lorentz_expr, file_name )

    file = open( "$(file_name).frm", "w" )
    write( file, form_script_str )
    close(file)

    println( "  [ form $(file_name).frm ]" )
    run( pipeline( `form $(file_name).frm`, "$(file_name).log" ) )

    file = open( "$(file_name).out", "r" )
    result_str = read( file, String )
    close( file )
    result_expr = Basic(result_str)
    new_lorentz_expr_list[index] = result_expr

    rm( "$(file_name).frm" )
    rm( "$(file_name).out" )
    rm( "$(file_name).log" )

  end # for index

  return new_lorentz_expr_list

end # function contract_Dirac_indices_noexpand


##################################
function check_consistency( 
    n_loop::Int64, 
    diagram_index::Int64, 
    lorentz_list::Vector{Basic}, 
    lorentz_noexpand_list::Vector{Basic}, 
    ext_mom_list::Vector{Basic}, 
    baseINC_script_str::String 
)::Nothing
##################################

  @assert n_loop in [1,2]
  @vars q1 q2
  n_ext_mom = length(ext_mom_list)

  # baseINC only needs information from the external fields.
  file = open( "baseINC.frm", "w" )
  write( file, baseINC_script_str )
  close(file)

  box_message( "Check consistency between two versions of amplitudes", color=:green )

  n_lorentz = length( lorentz_list )
  @assert n_lorentz == length( lorentz_noexpand_list )

  for lorentz_index ∈ 1:n_lorentz, repeat in 1:4 # check for the randomness
    one_lorentz = lorentz_list[lorentz_index]
    one_lorentz_noexpand = lorentz_noexpand_list[lorentz_index]
    diff = one_lorentz-one_lorentz_noexpand

    file_name = "check_diagram$(diagram_index)_lorentz$(lorentz_index)"

    q1_val = sum( ext_mom_list .* map( x->mod(x,256)+16, rand(Int64,n_ext_mom) ) )
    q2_val = sum( ext_mom_list .* map( x->mod(x,256)+16, rand(Int64,n_ext_mom) ) )
    

    file = open( "$(file_name).frm", "w" )
    write( file, """
    #-
    
    ***#: workspace 16G
    ***#: maxtermsize 40M
    
    Off Statistics;
    Off FinalStats;
    
    #include model_parameters.frm
    #include contractor.frm
    
    format nospaces;
    format maple;

    *** $(one_lorentz)
    *** $(one_lorentz_noexpand)

    Local expression = $(diff);
    .sort

    repeat;
      id FermionChain( ?vars1, GA(mom?), ?vars2 ) = FermionChain( ?vars1, GA(rho), ?vars2 )*FV(mom,rho);
      sum rho;
    endrepeat;
    .sort

    argument;
      id q1 = $(q1_val);
      id q2 = $(q2_val);
      argument;
        id q1 = $(q1_val);
        id q2 = $(q2_val);
      endargument;
    endargument;
    .sort

    #call ArrangeTrace();
    .sort
  
    *** linearize momenta
    id FV(rho1?,rho2?) = FV(rho1,rho2);
    id SP(rho1?,rho2?) = SP(rho1,rho2);
    id im^2 = -1;
    .sort

    repeat id FV(unity,rho?)*FermionChain( ?vars1, GA(rho?), ?vars2 ) = FermionChain( ?vars1, ?vars2 );
    .sort
    repeat id FV(mom?NonLOOP,rho?)*FermionChain( ?vars1, GA(rho?), ?vars2 ) = FermionChain( ?vars1, GA(mom), ?vars2 );
    .sort

    repeat;
      id FV(mom?NULL,rho?)^2 = 0;
      id LMT(rho1?,rho2?)*LMT(rho2?,rho3?) = LMT(rho1,rho3);
      id LMT(rho?,rho?) = diim;
      id LMT(rho1?,rho2?)*FV(mom?,rho1?) = FV(mom,rho2);
      id FV(mom?,rho?)*FermionChain(?vars1,GA(rho?),?vars2) = FermionChain(?vars1,GA(mom),?vars2);
      id LMT(rho1?,rho2?)*FermionChain(?vars1,GA(rho2?),?vars2) = FermionChain(?vars1,GA(rho1),?vars2);
      id FV(mom1?,rho?)*FV(mom2?,rho?) = SP(mom1,mom2);
      id SP(mom?NULL,mom?NULL) = 0;
      id FermionChain(?vars,GA(mom?NULL),Spinor?{U,V}(int?,mom?NULL,ref?,0)) = 0;
      id FermionChain(Spinor?{UB,VB}(int?,mom?NULL,ref?,0),GA?{PL,PR},GA(mom?NULL),?vars) = 0;
      id FermionChain(?vars1,GA(mom?NULL),GA(mom?NULL),?vars2) = 0;
      id FermionChain(?vars1,GA(rho?ALLLOR),GA(rho?ALLLOR),?vars2) = diim*FermionChain(?vars1,?vars2);
    endrepeat;
    .sort
    
    
    #call SimpleOrdering();
    .sort

    #call Simplification();
    .sort

    #include kin_relation.frm
    .sort

    id im^2 = -1;
    .sort

    #write <$(file_name).out> "%E", expression
    #close <$(file_name).out>
    .sort

    .end
  
    """ )

    close( file )

    run( pipeline( `tform -w$(Threads.nthreads()) $(file_name).frm`, "$(file_name).log" ) )

    file = open( "$(file_name).out", "r" )
    result_str = replace( read( file, String ), r"\s"=>"" )
    close(file)

    @assert length(result_str) < 4
    @assert (iszero∘Basic)(result_str) 
  
    rm( "$(file_name).frm" )
    rm( "$(file_name).log" )
    rm( "$(file_name).out" )

  end # for lorentz_index

  printstyled( "[ CHECK PASS ]\n", color=:green )

  return nothing

end # function check_consistency









###################################################################################################
"""
    simplify_color_factors( g::Graph, color_factor_list::Vector{Basic} )::Vector{Basic}

Simplify the color factors by using FORM scripts.
"""
function simplify_color_factors( g::Graph, color_factor_list::Vector{Basic} )::Vector{Basic}
###################################################################################################

  diagram_index = g.property[:diagram_index]
  printstyled( "\n[ Simplify the color factor for diagram #$(diagram_index) ]\n", color=:green )

  new_color_factor_list = Vector{Basic}( undef, length(color_factor_list) )
  for index in 1:length(color_factor_list)
    one_color_factor = color_factor_list[index]
    file_name = "simplify_color_factor$(index)_diagram$(diagram_index)"
    form_script_str = make_simplify_color_factor_script( one_color_factor, file_name )

    file = open( "$(file_name).frm", "w" )
    write( file, form_script_str )
    close(file)

    println( "  [ form $(file_name).frm ]" )
    run( pipeline( `form $(file_name).frm`, "$(file_name).log" ) )

    file = open( "$(file_name).out", "r" )
    result_str = read( file, String )
    close( file )
    result_expr = Basic(result_str)
    new_color_factor_list[index] = result_expr

    run( `rm $(file_name).frm $(file_name).out $(file_name).log` )
  end # for index

  return new_color_factor_list

end # function simplify_color_factors



###########################################################################################################
"""
    write_out_amplitude( n_loop::Int64, diagram_index::Int64, couplingfactor::Basic, parameter_dict::Dict{Basic,Basic}, ext_mom_list::Vector{Basic}, scale2_list::Vector{Basic}, kin_relation::Dict{Basic,Basic}, baseINC_script_str::String, amp_color_list::Vector{Basic}, amp_lorentz_list::Vector{Basic}, loop_den_list::Vector{Basic}, loop_den_xpt_list::Vector{Int64}, min_ep_xpt::Int64, max_ep_xpt::Int64, proc_str::String, the_lock::ReentrantLock )::Nothing

Write out the amplitude information into the file that can be read easily.
"""
function write_out_amplitude( n_loop::Int64, diagram_index::Int64, couplingfactor::Basic, parameter_dict::Dict{Basic,Basic}, 
    ext_mom_list::Vector{Basic}, scale2_list::Vector{Basic}, kin_relation::Dict{Basic,Basic}, baseINC_script_str::String, 
    amp_color_list::Vector{Basic}, amp_lorentz_list::Vector{Basic}, 
    loop_den_list::Vector{Basic}, loop_den_xpt_list::Vector{Int64},
    min_ep_xpt::Int64, max_ep_xpt::Int64, proc_str::String, the_lock::ReentrantLock )::Nothing
###########################################################################################################


  printstyled( "\n[ Generate amplitude_diagram$(diagram_index).out ]\n", color=:green )
  amp_file = open( "$(proc_str)_amplitudes/amplitude_diagram$(diagram_index).out", "w" )
  write( amp_file, 
    "n_loop: $(n_loop)\n"*
    "couplingfactor: $(couplingfactor)\n"*
    "ext_mom_list: $(ext_mom_list)\n"*
    "scale2_list: $(scale2_list)\n"*
    "Diagram #$(diagram_index): \n"*
    "  Denominators: \n" )
  for one_den in loop_den_list
    write( amp_file, 
    "    $(one_den)\n" )
  end # for one_den

  write( amp_file, 
    "Kinematics Relations: \n" )
  for one_pair in kin_relation
    write( amp_file, 
    "  "*string(one_pair)*"\n" )
  end # for one_pair

  write( amp_file, 
    "Color Factors: \n" )
  for ii in 1:length(amp_color_list)
    one_color = amp_color_list[ii]
    write( amp_file, 
    "  amp_color #$(ii): \n"*
    "    $(one_color); \n" )
  end # for ii

  write( amp_file, 
    "Lorentz Factors: \n" )
  for ii in 1:length(amp_lorentz_list)
    one_val = amp_lorentz_list[ii]
    write( amp_file, 
    "  amp_lorentz #$(ii): \n"* 
    "    $( expand(one_val/couplingfactor) ); \n" )
  end # for ii

  write( amp_file, 
    "Model Parameters: \n" )
  for one_pair in parameter_dict
    write( amp_file, 
    "  "*string(one_pair)*"\n" )
  end # for one_pair

  close( amp_file )

  if isfile( "$(proc_str)_amplitudes/amplitude_diagram$(diagram_index).jld2" )
    rm( "$(proc_str)_amplitudes/amplitude_diagram$(diagram_index).jld2" )
  end # if

  jldopen( "$(proc_str)_amplitudes/amplitude_diagram$(diagram_index).jld2", "w" ) do file 
    write( file, "Generator", "FeAmGen.jl" )
    write( file, "n_loop", n_loop )
    write( file, "min_ep_xpt", min_ep_xpt )
    write( file, "max_ep_xpt", max_ep_xpt )
    write( file, "couplingfactor", string(couplingfactor) )
    write( file, "ext_mom_list", map( string, ext_mom_list ) )
    write( file, "scale2_list", map( string, scale2_list ) )
    write( file, "loop_den_list",  map( string, loop_den_list ) )
    write( file, "loop_den_xpt_list", loop_den_xpt_list )
    write( file, "kin_relation", map( p_->(string(p_[1]),string(p_[2])), collect(kin_relation) ) )
    write( file, "baseINC_script_str", baseINC_script_str )
    write( file, "model_parameter_dict", map( p_->(string(p_[1]),string(p_[2])), collect(parameter_dict) ) )
    write( file, "amp_color_list",  map( string, amp_color_list ) )
    write( file, "amp_lorentz_list",  map( string, amp_lorentz_list ) )
  end # file

  return nothing

end # function write_out_amplitude

#########################################################################
"""
    write_out_visual_graph( g::Graph, model::Model, couplingfactor::Basic, color_list::Vector{Basic}, lorentz_list::Vector{Basic}, ext_mom_list::Vector{Basic}, scale2_list::Vector{Basic}, proc_str::String )::Nothing

Write out the diagrams into the file that can be complied or read easily.
"""
function write_out_visual_graph( g::Graph, model::Model, 
    couplingfactor::Basic, color_list::Vector{Basic}, lorentz_list::Vector{Basic},
    ext_mom_list::Vector{Basic}, scale2_list::Vector{Basic}, proc_str::String )::Nothing
#########################################################################

  diagram_index = g.property[:diagram_index]

  graph_str = generate_visual_graph( g, model )
  graph_str = replace( graph_str, "SymEngine.Basic"=>"Basic" )

  printstyled( "\n[ Generate visual_diagram$(diagram_index).tex ]\n", color=:green )
  visual_file = open( "$(proc_str)_visuals/visual_diagram$(diagram_index).tex", "w" )
  write( visual_file, """
  \\documentclass{revtex4}
  \\usepackage{tikz-feynman}
  \\usepackage{rotating}
  \\usepackage{breqn}
  
  \\begin{document}
  
  $(graph_str)

  \\end{document} 
  
  """ )
  close( visual_file )


  expression_file = open( "$(proc_str)_visuals/expression_diagram$(diagram_index).out", "w" ) 
  write( expression_file, """
  (* coupling factor: *) 
  $(couplingfactor)
  """ )

  n_color = length(color_list)
  for color_index ∈ 1:n_color
  write( expression_file, """
  (* color factor \\#$(color_index): *)
  $(color_list[color_index])
  
  (* color factor coefficient \\#$(color_index): *)
  
  $(lorentz_list[color_index])
  """ )
  end # for color_index

  close( expression_file )

  return nothing

end # function write_out_visual_graph




##########################################################################
"""
    generate_amplitude( model::Model, input::Dict{Any,Any} )::Nothing

Generate amplitudes after `model` has been prepared.
"""
function generate_amplitude( model::Model, input::Dict{Any,Any} )::Nothing
##########################################################################

  proc_str = join( [ input["incoming"]; "TO"; input["outgoing"]; "$(input["n_loop"])Loop" ], "_" )

  n_loop = input["n_loop"]
  couplingfactor = Basic(input["couplingfactor"]) 

  qgraf_out = YAML.load_file( "qgraf_out.dat" )

  qgraf_list = qgraf_out["FeynmanDiagrams"]

  #------------------------------------------------  
  # Convert qgraf to Graph
  graph_list = @pipe qgraf_list |> 
               map( q -> convert_qgraf_TO_Graph( q, model ), _ ) |>
               convert( Array{Graph,1}, _ ) |>
               filter( !isnothing, _ ) |>
               sort( _, by= g->g.property[:diagram_index] )
  #------------------------------------------------  


  #------------------------------------------------  
  # Generate Gauge choice
  gauge_choice = generate_gauge_choice( graph_list )
  # Generate kinematics relation
  kin_relation = generate_kin_relation( graph_list )
  file = open( "kin_relation.frm", "w" )
  write( file, (join∘map)( ele_->"id $(ele_[1]) = $(ele_[2]);\n", collect(kin_relation) ) )
  close(file)

  ext_mom_list  = generate_ext_mom_list( graph_list )

  #------------------------------------------------  
  # Calculate amplitude for each graph

  file = open( "model_parameters.frm", "w" )
  write( file, "symbol $(join( map( k_->string(k_), collect(keys(model.parameter_dict)) ), "," ));\n" )
  close(file)

  file = open( "contractor.frm", "w" )
  write( file, make_contractor_script() )
  close(file)

  file = open( "color.frm", "w" )
  write( file, make_color_script() )
  close(file)

  # baseINC only needs information from the external fields.
  file = open( "baseINC.frm", "w" )
  baseINC_script_str = make_baseINC_script( first(graph_list), gauge_choice )
  write( file, baseINC_script_str )
  close(file)

  if isdir( "$(proc_str)_visuals" )
    mv( "$(proc_str)_visuals", "$(proc_str)_visuals_$(now())" )
  end # if
  mkdir( "$(proc_str)_visuals" )
  root_dir = (dirname∘dirname∘pathof∘Base.moduleroot)(FeAmGen)
  if isfile( "$(root_dir)/tikz-feynman.sty" )
    cp( "$(root_dir)/tikz-feynman.sty", "$(proc_str)_visuals/tikz-feynman.sty" )
  else
    error( "Can not find tikz_feynman.sty in $(root_dir)" )
  end # if

  if isdir( "$(proc_str)_amplitudes" )
    mv( "$(proc_str)_amplitudes", "$(proc_str)_amplitudes_$(now())" )
  end # if
  mkdir( "$(proc_str)_amplitudes" )

  the_lock = ReentrantLock()

  now()
  #Threads.@threads for g in graph_list
  for g in graph_list
    diagram_index = g.property[:diagram_index]
    box_message( "Working on diagram #$(diagram_index) ($(length(graph_list)))", color=:light_green )

    scale2_list = generate_scale2_list( g, kin_relation )

    amp_color_list, amp_lorentz_list = assemble_amplitude( g )
    amp_lorentz_list_pre, loop_den_list, loop_den_xpt_list = factor_out_loop_den( g, amp_lorentz_list )
    amp_lorentz_list = contract_Dirac_indices( g, amp_lorentz_list_pre )
    amp_lorentz_noexpand_list = contract_Dirac_indices_noexpand( g, amp_lorentz_list_pre )

    amp_color_list = simplify_color_factors( g, amp_color_list )

    #-------------------------------------------
    perm = sortperm( amp_color_list, by=gen_sorted_str )
    amp_color_list = amp_color_list[perm]
    amp_lorentz_list = amp_lorentz_list[perm]
    amp_lorentz_noexpand_list = amp_lorentz_noexpand_list[perm]

    write_out_amplitude( n_loop, diagram_index, couplingfactor, model.parameter_dict, ext_mom_list, scale2_list, kin_relation, baseINC_script_str,
                         amp_color_list, amp_lorentz_list, loop_den_list, loop_den_xpt_list, input["Amp_Min_Ep_Xpt"], input["Amp_Max_Ep_Xpt"], proc_str, the_lock )


    write_out_visual_graph( g, model, couplingfactor, amp_color_list, amp_lorentz_noexpand_list, ext_mom_list, scale2_list, proc_str )

    if input["check_consistency"] 
      check_consistency( n_loop, diagram_index, amp_lorentz_list, amp_lorentz_noexpand_list, ext_mom_list, baseINC_script_str )
    end # if

  end # for g
  now()


  # remove intermediate files
  rm( "baseINC.frm" )
  rm( "contractor.frm" )
  rm( "color.frm" )
  rm( "kin_relation.frm" )
  rm( "model_parameters.frm" )


  diagram_index_list = map( g_->g_.property[:diagram_index], graph_list )
  file = open( "$(proc_str)_visuals/generate_diagram_pdf.jl", "w" )
  write( file, """
  diagram_index_list = $(diagram_index_list)
  for diagram_index in diagram_index_list
    run( `lualatex visual_diagram\$(diagram_index)` )
  end
  """ )
  close(file)
  @info "Users can generate PDF files for all diagrams." script="generate_diagram_pdf.jl"

  return nothing

end # function generate_amplitude





